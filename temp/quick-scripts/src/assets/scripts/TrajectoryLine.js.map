{"version":3,"sources":["assets\\scripts\\TrajectoryLine.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TrajectoryLine extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    arrowPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Label)\r\n    angle: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    power: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    label: cc.Node = null;\r\n\r\n    private line: cc.Graphics = null;\r\n\r\n    private arrow = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.line = this.node.getComponent(cc.Graphics);\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    public drawStraightLine(angle, range) {\r\n        this.line.clear();\r\n        this.line.lineWidth = 5;\r\n        this.line.lineCap = cc.Graphics.LineCap.ROUND;\r\n        let cos = Math.cos(angle) * range;\r\n        let sin =  Math.sin(angle) * range;\r\n        for(let i = 9; i >= 0; i--) {\r\n            this.line.moveTo(35 + cos - cos * 0.1 * (i+1), 8 + sin - sin * 0.1 * (i+1));\r\n            this.line.lineTo(35 + cos - cos * 0.1 * i - (cos/9), 8 + sin - sin * 0.1 * i - (sin/9));\r\n        }\r\n        this.line.stroke();\r\n    }\r\n\r\n    public drawCircle(angle, range) {\r\n        \r\n    }\r\n\r\n    public drawCurveLine(angle, power) {\r\n        if(this.arrow) {\r\n            if(power > 100) power = 100;\r\n            let degree = angle * 180 / Math.PI;\r\n            this.arrow.getComponent(\"Arrow\").arrowMove(degree);\r\n            this.angle.string = Math.floor(degree).toString();\r\n            this.power.string = power.toString();\r\n        } else {\r\n            this.arrow = cc.instantiate(this.arrowPrefab);\r\n            this.arrow.getComponent(\"Arrow\").init(this.node);\r\n            this.label.active = true;\r\n        }\r\n        // not accurate\r\n        // this.line.clear();\r\n        // this.line.lineWidth = 5;\r\n        // this.line.lineCap = cc.Graphics.LineCap.ROUND;\r\n        // this.line.moveTo(35, 8);\r\n        // // this.line.quadraticCurveTo(35, Math.tan(angle) * 100, 35 + Math.sin(angle) * 1000, 8 + Math.cos(angle) * 100);\r\n        // // this.line.quadraticCurveTo(35, Math.sin(angle) * 1000 + Math.tan(angle) * 100, 1000, 8);\r\n        // // this.line.quadraticCurveTo(35, Math.tan(angle) * 100, Math.cos(angle) * 1000, 8);\r\n        // this.line.quadraticCurveTo(35, Math.sin(angle) * 1000, 1000, 960);\r\n        // this.line.stroke();\r\n    }\r\n\r\n    public clearLine() {\r\n        this.line.clear();\r\n        this.label.active = false;\r\n        if(this.arrow) {\r\n            this.arrow.destroy();\r\n            this.arrow = null;\r\n        }\r\n    }\r\n}\r\n"]}